// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
		Not(in = zx, out = notzx);
		And16(a[0] = notzx, a[1] = notzx, 
			  a[2] = notzx, a[3] = notzx,
			  a[4] = notzx, a[5] = notzx,
			  a[6] = notzx, a[7] = notzx,
			  a[8] = notzx, a[9] = notzx,
			  a[10] = notzx, a[11] = notzx,
			  a[12] = notzx, a[13] = notzx,
			  a[14] = notzx, a[15] = notzx,
				b = x, out = x1);
		Not16(in[0] = nx, 
			  in[1] = nx,
			  in[2] = nx,
			  in[3] = nx,
			  in[4] = nx,
			  in[5] = nx,
			  in[6] = nx,
			  in[7] = nx,
			  in[8] = nx,
			  in[9] = nx,
			  in[10] = nx,
			  in[11] = nx,
			  in[12] = nx,
			  in[13] = nx,
			  in[14] = nx,
			  in[15] = nx,
			  out = notnx);
		And16(a = notnx, b = x1, out = x2);
		Not16(in = x1, out = notx1);
		And16(a = notx1, b[0] = nx, b[1] = nx,
						 b[2] = nx, b[3] = nx,
						 b[4] = nx, b[5] = nx,
						 b[6] = nx, b[7] = nx,
						 b[8] = nx, b[9] = nx,
						 b[10] = nx, b[11] = nx,
						 b[12] = nx, b[13] = nx,
						 b[14] = nx, b[15] = nx,
						 out = x3
		);
		Or16(a = x2, b = x3, out = xrst);
		
		Not(in = zy, out = notzy);
		And16(a[0] = notzy, a[1] = notzy, 
			  a[2] = notzy, a[3] = notzy,
			  a[4] = notzy, a[5] = notzy,
			  a[6] = notzy, a[7] = notzy,
			  a[8] = notzy, a[9] = notzy,
			  a[10] = notzy, a[11] = notzy,
			  a[12] = notzy, a[13] = notzy,
			  a[14] = notzy, a[15] = notzy,
			  b = y, out = y1);
		Not16(in[0] = ny, 
			  in[1] = ny,
			  in[2] = ny,
			  in[3] = ny,
			  in[4] = ny,
			  in[5] = ny,
			  in[6] = ny,
			  in[7] = ny,
			  in[8] = ny,
			  in[9] = ny,
			  in[10] = ny,
			  in[11] = ny,
			  in[12] = ny,
			  in[13] = ny,
			  in[14] = ny,
			  in[15] = ny,
			  out = notny);
		And16(a = notny, b = y1, out = y2);
		Not16(in = y1, out = noty1);
		And16(a = noty1, b[0] = ny, b[1] = ny,
						 b[2] = ny, b[3] = ny,
						 b[4] = ny, b[5] = ny,
						 b[6] = ny, b[7] = ny,
						 b[8] = ny, b[9] = ny,
						 b[10] = ny, b[11] = ny,
						 b[12] = ny, b[13] = ny,
						 b[14] = ny, b[15] = ny,
						 out = y3
		);
		Or16(a = y2, b = y3, out = yrst);
		
		Add16(a = xrst, b = yrst, out = xysum);
		And16(a = xrst, b = yrst, out = xyand);
		Mux16(a = xyand, b = xysum, sel = f, out = rst1);
		
		Not16(in[0] = no, in[1] = no,
			  in[2] = no, in[3] = no,
			  in[4] = no, in[5] = no,
			  in[6] = no, in[7] = no,
			  in[8] = no, in[9] = no,
			  in[10] = no, in[11] = no,
			  in[12] = no, in[13] = no,
			  in[14] = no, in[15] = no,
			  out = notno
		);
		Not16(in = rst1, out = notrst1);
		And16(a = notrst1, b[0] = no, b[1] = no,
						   b[2] = no, b[3] = no,
						   b[4] = no, b[5] = no,
						   b[6] = no, b[7] = no,
						   b[8] = no, b[9] = no,
						   b[10] = no, b[11] = no,
						   b[12] = no, b[13] = no,
						   b[14] = no, b[15] = no,
						   out = rst2);
		And16(a = rst1, b = notno, out = rst3);
		
		Or16(a = rst2, b = rst3, out[0] = outtemp0,out[1] = outtemp1,
								 out[2] = outtemp2,out[3] = outtemp3,
								 out[4] = outtemp4,out[5] = outtemp5,
								 out[6] = outtemp6,out[7] = outtemp7,
								 out[8] = outtemp8,out[9] = outtemp9,
								 out[10] = outtemp10,out[11] = outtemp11,
								 out[12] = outtemp12,out[13] = outtemp13,
								 out[14] = outtemp14,out[15] = outtemp15
		);
		
		Or(a = outtemp15, b = false, out = ng);
		
		Or(a = outtemp0, b = outtemp1, out = out1);
		Or(a = out1, b = outtemp2, out = out2);
		Or(a = out2, b = outtemp3, out = out3);
		Or(a = out3, b = outtemp4, out = out4);
		Or(a = out4, b = outtemp5, out = out5);
		Or(a = out5, b = outtemp6, out = out6);
		Or(a = out6, b = outtemp7, out = out7);
		Or(a = out7, b = outtemp8, out = out8);
		Or(a = out8, b = outtemp9, out = out9);
		Or(a = out9, b = outtemp10, out = out10);
		Or(a = out10, b = outtemp11, out = out11);
		Or(a = out11, b = outtemp12, out = out12);
		Or(a = out12, b = outtemp13, out = out13);
		Or(a = out13, b = outtemp14, out = out14);
		Or(a = out14, b = outtemp15, out = out15);
		Not(in = out15, out = zr);
		
		Or16(a = rst2, b = rst3, out = out);
}